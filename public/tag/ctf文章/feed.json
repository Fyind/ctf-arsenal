{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"ctf文章\" tag",
    "description": "",
    "home_page_url": "https://cr4zyp1x3l.netlify.app",
    "items": [
        {
            "id": "https://cr4zyp1x3l.netlify.app/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/",
            "url": "https://cr4zyp1x3l.netlify.app/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/",
            "title": "逆向工程",
            "date_published": "2025-02-03T22:17:06.000Z",
            "content_html": "<h1 id=\"ida的使用\"><a class=\"anchor\" href=\"#ida的使用\">#</a> IDA 的使用</h1>\n<p>根据程序的位数选择对应位数的 IDA 打开程序。（附件是 64 位的<br>\n一般没有特殊需求，我们直接默认点击 OK 就好了</p>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929110409063.png\" alt=\"image-20240929110409063\"></p>\n<p>在 functions windows 里面找到 main</p>\n<p>然后在右边的窗口里按 F5 就可以跳出反汇编窗口</p>\n<blockquote>\n<p>buuctf-easyre</p>\n</blockquote>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929110715802.png\" alt=\"image-20240929110715802\"></p>\n<p><a href=\"https://blog.csdn.net/weixin_45723661/category_11348511.html\">https://blog.csdn.net/weixin_45723661/category_11348511.html</a></p>\n<h3 id=\"ida-功能界面介绍\"><a class=\"anchor\" href=\"#ida-功能界面介绍\">#</a> IDA 功能界面介绍</h3>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929112232598.png\" alt=\"image-20240929112232598\"></p>\n<p>- 蓝色 :  <code>.text section</code> <br>\n- 深蓝：用户写的函数编译后的代码区<br>\n - 浅蓝：编译器自己添加的函数，像启动函数，异常函数等等 ..<br>\n- 粉红色 :  <code>.idata section</code> <br>\n 有关输入表的一些数据信息<br>\n - 军绿色：  <code>.rdata section</code> <br>\n 纯数据，只读<br>\n - 灰色：为了段对齐而留下的空隙<br>\n - 黑色：禁区</p>\n<h4 id=\"汇编代码界面注释\"><a class=\"anchor\" href=\"#汇编代码界面注释\">#</a> 汇编代码界面注释</h4>\n<p><code>shift + ;</code></p>\n<p>伪代码注释</p>\n<p><code>/</code></p>\n<ul>\n<li>G 跳转</li>\n<li>N 改名</li>\n</ul>\n<h4 id=\"imports\"><a class=\"anchor\" href=\"#imports\">#</a> imports</h4>\n<p>程序从动态链接库中导入的要使用的函数</p>\n<h4 id=\"exports\"><a class=\"anchor\" href=\"#exports\">#</a> exports</h4>\n<p>程序导出给其它程序使用的函数</p>\n<h3 id=\"字符串窗口\"><a class=\"anchor\" href=\"#字符串窗口\">#</a> 字符串窗口</h3>\n<p><code>shift + F12</code></p>\n<p>双击字符串找到位置</p>\n<p>在 DATA XREF 里面可以找到谁访问了这个地址</p>\n<blockquote>\n<p>buuctf-reverse_1</p>\n</blockquote>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929113449816.png\" alt=\"image-20240929113449816\"></p>\n<p>在数字上按 R 可以转换成字符</p>\n<h4 id=\"这个是带换行的\"><a class=\"anchor\" href=\"#这个是带换行的\">#</a> 这个是带换行的</h4>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240930190521829.png\" alt=\"image-20240930190521829\"></p>\n<ul>\n<li>按 A 转换成字符串</li>\n<li>D 转换成数据</li>\n<li>C 转换成汇编代码</li>\n<li>U 转换成原始字节</li>\n</ul>\n<h3 id=\"export-data\"><a class=\"anchor\" href=\"#export-data\">#</a> export data</h3>\n<p>shift + E 可以导出</p>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240930191508047.png\" alt=\"image-20240930191508047\"></p>\n<p>TODO:</p>\n<p>总结 SimpleRev</p>\n<h3 id=\"调整基地址\"><a class=\"anchor\" href=\"#调整基地址\">#</a> 调整基地址</h3>\n<p>Edit 里面 Segment 里面 Rebase Program, 然后输入基地址就可以和 x64dbg 地址对齐</p>\n<h4 id=\"跳转地址\"><a class=\"anchor\" href=\"#跳转地址\">#</a> 跳转地址</h4>\n<p>按 G 跳转</p>\n<h2 id=\"linux-调试\"><a class=\"anchor\" href=\"#linux-调试\">#</a> Linux 调试</h2>\n<p>使用 windows 下面的 ida pro 调试 Linux 下面的程序需要使用 ida 的远程调试功能。<br>\n首先将 ida 文件夹中的 dbgsrv/linux_serverx64 文件放入需要调试程序的同级文件夹中。再使用 chmod a+x linux_serverx64 改变该文件的权限。</p>\n<p>把要调试的文件也要 + x 运行权限</p>\n<p>然后连接</p>\n<p>再 application 和 inputfile 里填入要调试的<strong>绝对路径</strong> ，host 里面填 ip 地址，密码不用填，然后就可以了</p>\n<blockquote>\n<p>buuctf-level3</p>\n</blockquote>\n<p>下断点进调试看 base64 数组被改变的值</p>\n<h3 id=\"rsa\"><a class=\"anchor\" href=\"#rsa\">#</a> RSA</h3>\n<blockquote>\n<p>buuctf - signin</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__gmpz_init_set_str</span><span class=\"token punctuation\">(</span>v7<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">__gmpz_init_set_str</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">,</span> v9<span class=\"token punctuation\">,</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">__gmpz_init_set_str</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">,</span> <span class=\"token string\">\"103461035900816914121390101299049044413950405173712170434161686539878160984549\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">__gmpz_init_set_str</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">,</span> <span class=\"token string\">\"65537\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>看到这些整数可能是 RSA  <code>E=65537, N = 1034....</code></p>\n<p><code>__gmpz_init_set_str</code>  这是一个 GNU 高精度算法库</p>\n<p>这三个参数分别是多精度整数变量，字符串，进制</p>\n<p><code>__gmpz_powm(v6, v6, v5, v4) </code> 这个的意思其实就是 计算 v6 的 v5 次方并对 v4 取模，结果写入 v6。</p>\n<p>10346103590081691412139010129904904441395040517371217043416168653</p>\n<p><a href=\"http://www.factordb.com/index.php\">http://www.factordb.com/index.php</a> 这个可以查质数分解</p>\n<p>整数到 bytes</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unhexlify<span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># si = int.from_bytes(s) # byte to int</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># rsa.transform.int2bytes(c) # alternative</span></pre></td></tr></table></figure><p>题解</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> math</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> inverse</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> binascii <span class=\"token keyword\">import</span> unhexlify</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token number\">65537</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token number\">282164587459512124844245113950593348271</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q <span class=\"token operator\">=</span> <span class=\"token number\">366669102002966856876605669837014229419</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>d <span class=\"token operator\">=</span> inverse<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>lcm<span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>M <span class=\"token operator\">=</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rsa<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>int2bytes<span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>decrypted <span class=\"token operator\">=</span> rsa<span class=\"token punctuation\">.</span>PrivateKey<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>blinded_decrypt<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rsa<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>int2bytes<span class=\"token punctuation\">(</span>decrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从 key 文件里面读取</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> RSA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pub.key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pkdata <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pk <span class=\"token operator\">=</span> RSA<span class=\"token punctuation\">.</span>import_key<span class=\"token punctuation\">(</span>pkdata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>n <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">.</span>n</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>e <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">.</span>e</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"壳\"><a class=\"anchor\" href=\"#壳\">#</a> 壳</h2>\n<p>用 exeinfope 可以看有没有壳， 或者用 file 指令</p>\n<h3 id=\"upx\"><a class=\"anchor\" href=\"#upx\">#</a> UPX</h3>\n<blockquote>\n<p>buuctf - 新年快乐</p>\n</blockquote>\n<p>可以看出来是 UPX 的壳</p>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929125830292.png\" alt=\"image-20240929125830292\"></p>\n<p>file 指令会有</p>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929130135608.png\" alt=\"image-20240929130135608\"></p>\n<p>解壳</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upx <span class=\"token parameter variable\">-d</span> xx.exe</pre></td></tr></table></figure><h1 id=\"安卓java\"><a class=\"anchor\" href=\"#安卓java\">#</a> 安卓 / JAVA</h1>\n<p>jdk 安装<a href=\"https://www.oracle.com/java/technologies/downloads/#jdk22-windows\"> https://www.oracle.com/java/technologies/downloads/#jdk22-windows</a></p>\n<h3 id=\"jadx\"><a class=\"anchor\" href=\"#jadx\">#</a> jadx</h3>\n<p>安装<a href=\"https://github.com/skylot/jadx/releases/tag/v1.5.0\"> https://github.com/skylot/jadx/releases/tag/v1.5.0</a></p>\n<p>可以打开文件，把 APK 传进去，在左边可以看到源代码</p>\n<p>打开 windows gui 的那个</p>\n<h1 id=\"ios逆向\"><a class=\"anchor\" href=\"#ios逆向\">#</a> IOS 逆向</h1>\n<p><a href=\"https://www.i4.cn/\">https://www.i4.cn/</a></p>\n<p>装爱思助手</p>\n<p>越狱，要制作启动盘</p>\n<p><a href=\"https://www.bilibili.com/video/BV1or421G7vo/?spm_id_from=333.788.videopod.sections&amp;vd_source=2c1227d0a7d29725db75d3fc52e6089b\">https://www.bilibili.com/video/BV1or421G7vo/?spm_id_from=333.788.videopod.sections&amp;vd_source=2c1227d0a7d29725db75d3fc52e6089b</a></p>\n<h3 id=\"frida\"><a class=\"anchor\" href=\"#frida\">#</a> Frida</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> frida-tools</pre></td></tr></table></figure><h3 id=\"ghigra\"><a class=\"anchor\" href=\"#ghigra\">#</a> Ghigra</h3>\n<h4 id=\"x64dbg\"><a class=\"anchor\" href=\"#x64dbg\">#</a> x64dbg</h4>\n<p>gitbub 上有</p>\n<h1 id=\"unity\"><a class=\"anchor\" href=\"#unity\">#</a> Unity</h1>\n<blockquote>\n<p>BUUCTF [BJDCTF2020]BJD hamburger competition</p>\n</blockquote>\n<p>第一次接触 Unity 的逆向题<br>\n这种关键代码一般都在  <code>assembly-csharp.dll</code>  里面，加载到 dnspy 里面，左边点开可以看到源代码</p>\n<h1 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> uncompyle6</pre></td></tr></table></figure><p>用这个命令</p>\n<p>用 online 的比较好<a href=\"https://www.lddgo.net/en/string/pyc-compile-decompile\"> https://www.lddgo.net/en/string/pyc-compile-decompile</a></p>\n<h1 id=\"go\"><a class=\"anchor\" href=\"#go\">#</a> GO</h1>\n<p><a href=\"https://github.com/sibears/IDAGolangHelper\">https://github.com/sibears/IDAGolangHelper</a></p>\n<p>可以装这个插件</p>\n<h1 id=\"代码分析\"><a class=\"anchor\" href=\"#代码分析\">#</a> 代码分析</h1>\n<blockquote>\n<p>buuctf lucky guy</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span>j <span class=\"token operator\">>></span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>_BYTE<span class=\"token punctuation\">)</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span>j <span class=\"token operator\">>></span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>等价于</p>\n<p><code>j % 2 == 1</code></p>\n<h3 id=\"复用代码解密\"><a class=\"anchor\" href=\"#复用代码解密\">#</a> 复用代码解密</h3>\n<blockquote>\n<p>buuctf 刮开有奖</p>\n</blockquote>\n<p>这里面的函数 IDA 会判断错误，需要改正，类型改了代码也要记得改</p>\n<h4 id=\"答案在其他函数里\"><a class=\"anchor\" href=\"#答案在其他函数里\">#</a> 答案在其他函数里</h4>\n<blockquote>\n<p>buuctf [2019 红帽杯] easyRE</p>\n</blockquote>\n<p>往 main 的下面找找</p>\n<h2 id=\"花指令\"><a class=\"anchor\" href=\"#花指令\">#</a> 花指令</h2>\n<p>有时候 IDA 反编译不了，这个时候要改指令，通常是 jnz 指令</p>\n<blockquote>\n<p>buuctf Maze</p>\n</blockquote>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/31f160e7596c17139883c26175af9d24.webp\" alt=\"img\"></p>\n<p>如何 nop:</p>\n<ol>\n<li><code>Edit/Patch program/Change byte</code>  将要修改的 byte 改成 90，修改完后 <code>Edit/Patch program/Apply patches to input file</code>  保存修改后的文件，</li>\n<li>或者 <code>Edit/Patch program/Assemble</code>  直接输入 <code>nop</code> ，然后同样要保存</li>\n</ol>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/a3a1c2a23cadd179ee2a5d6c81e3adb2.webp\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"把报错的函数编译一下\"><a class=\"anchor\" href=\"#把报错的函数编译一下\">#</a> 把报错的函数编译一下</h4>\n<blockquote>\n<p>[MRCTF2020]Xor</p>\n</blockquote>\n<p>把报错的函数点进去反编译一下，然后再回来编译就可以了</p>\n<h3 id=\"数据类型判断\"><a class=\"anchor\" href=\"#数据类型判断\">#</a> 数据类型判断</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 v6<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"input: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v6 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个 v6 应该是 4byte, 因为  <code>(char *)v6 + 4 * i)</code>  是 4 字节</p>\n<h2 id=\"加密算法\"><a class=\"anchor\" href=\"#加密算法\">#</a> 加密算法</h2>\n<h3 id=\"tea加密\"><a class=\"anchor\" href=\"#tea加密\">#</a> TEA 加密</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v3 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v4 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x3F</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    v5 <span class=\"token operator\">+=</span> <span class=\"token number\">1166789954</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    v3 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">+</span> v5 <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    v4 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">+</span> v5 <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span>a1 <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>result <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解密</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0xDF48EF7E</span><span class=\"token punctuation\">,</span><span class=\"token number\">550153460</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3774025685</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1548802262</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2652626477</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x84F30420</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> table<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> decoded<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> v5 <span class=\"token operator\">=</span> <span class=\"token number\">0x458BCD42</span> <span class=\"token operator\">*</span> <span class=\"token number\">64</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v3 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v4 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">63</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        v4 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">+</span> v5 <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        v3 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">+</span> v5 <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> table<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v5 <span class=\"token operator\">-=</span> <span class=\"token number\">0x458BCD42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    decoded<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    decoded<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>要把 v3，v4 的类型写对，否则计算结果不对</p>\n<h3 id=\"解方程z3\"><a class=\"anchor\" href=\"#解方程z3\">#</a> 解方程 z3</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip <span class=\"token function\">install</span> z3-solver</pre></td></tr></table></figure><blockquote>\n<p>buuctf [ACTF 新生赛 2020] Universe_final_answer</p>\n</blockquote>\n<h3 id=\"md5\"><a class=\"anchor\" href=\"#md5\">#</a> MD5</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">.</span>MD5 <span class=\"token keyword\">import</span> MD5Hash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> binascii <span class=\"token keyword\">import</span> hexlify</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>token <span class=\"token operator\">=</span> <span class=\"token string\">\"1001\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>hexlify<span class=\"token punctuation\">(</span>MD5Hash<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>digest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"init-函数修改\"><a class=\"anchor\" href=\"#init-函数修改\">#</a> init 函数修改</h2>\n<p><a href=\"https://www.cnblogs.com/NozoMizo/articles/17737745.html\">https://www.cnblogs.com/NozoMizo/articles/17737745.html</a></p>\n<h1 id=\"windows-api\"><a class=\"anchor\" href=\"#windows-api\">#</a> Windows API</h1>\n<h3 id=\"findresourcea\"><a class=\"anchor\" href=\"#findresourcea\">#</a> FindResourceA</h3>\n<blockquote>\n<p>buuctf CrackRTF</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hResInfo <span class=\"token operator\">=</span> <span class=\"token function\">FindResourceA</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCSTR<span class=\"token punctuation\">)</span><span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AAA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hResInfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FindResourceA</code>  函数用于查找一个指定的资源。</p>\n<ul>\n<li>第一个参数是模块句柄，这里为  <code>0</code> ，表示当前模块。</li>\n<li>第二个参数  <code>(LPCSTR)0x65</code>  是资源的标识符（ID），这里使用的是资源 ID  <code>0x65</code> 。</li>\n<li>第三个参数  <code>&quot;AAA&quot;</code>  是资源的类型名称。</li>\n</ul>\n<p>如果  <code>FindResourceA</code>  返回  <code>NULL</code> ，则表示资源没有找到，函数立即返回  <code>0</code> 。</p>\n<p><strong>用 Resource Hacker 可以提取 exe 的资源</strong></p>\n<p><code>SizeofResource</code>  获取指定资源的大小，结果赋值给  <code>nNumberOfBytesToWrite</code> ，表示将要写入的字节数</p>\n<h3 id=\"loadresource\"><a class=\"anchor\" href=\"#loadresource\">#</a> LoadResource</h3>\n<p><code>LoadResource</code>  函数将资源加载到内存中，返回资源的句柄  <code>hResData</code> 。</p>\n<p>如果加载失败，返回  <code>NULL</code> ，函数返回  <code>0</code> 。</p>\n<h4 id=\"lockresource\"><a class=\"anchor\" href=\"#lockresource\">#</a> LockResource</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lpBuffer <span class=\"token operator\">=</span> <span class=\"token function\">LockResource</span><span class=\"token punctuation\">(</span>hResData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>LockResource</code>  锁定资源并返回一个指向资源数据的指针  <code>lpBuffer</code> 。通过这个指针可以访问资源内容</p>\n<h3 id=\"createfile\"><a class=\"anchor\" href=\"#createfile\">#</a> CreateFile</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dbapp.rtf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000000u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hFile <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>CreateFileA</code>  用于创建或打开文件，这里试图创建一个名为  <code>&quot;dbapp.rtf&quot;</code>  的文件。</p>\n<ul>\n<li><code>0x10000000u</code> ： <code>GENERIC_WRITE</code> ，表示文件以写入模式打开。</li>\n<li><code>0</code>  和  <code>0</code> ：表示不使用文件共享和默认安全属性。</li>\n<li><code>2u</code> ： <code>CREATE_ALWAYS</code> ，表示总是创建文件，即使文件已经存在也会覆盖。</li>\n<li><code>0x80u</code> ： <code>FILE_ATTRIBUTE_NORMAL</code> ，表示文件的普通属性。</li>\n</ul>\n<p>如果文件创建失败，返回  <code>(HANDLE)-1</code> ，函数返回  <code>0</code> 。</p>\n<h3 id=\"writefile\"><a class=\"anchor\" href=\"#writefile\">#</a> WriteFile</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span>hFile<span class=\"token punctuation\">,</span> lpBuffer<span class=\"token punctuation\">,</span> nNumberOfBytesToWrite<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>NumberOfBytesWritten<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>WriteFile</code>  将  <code>lpBuffer</code>  中的数据写入到文件  <code>hFile</code> ，写入的字节数为  <code>nNumberOfBytesToWrite</code> 。</p>\n<p><code>&amp;NumberOfBytesWritten</code>  用于接收实际写入的字节数。</p>\n<p>如果  <code>WriteFile</code>  失败，函数返回  <code>0</code> 。</p>\n<h2 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h2>\n<blockquote>\n<p>buuctf Youngter-drive</p>\n<p><code>counter = 29</code></p>\n<p>最终加密  <code>TOiZiZtOrYaToUwPnToBsOaOapsyS</code></p>\n<p>线程 1：若 counter&gt;-1 每次调用对 counter 位置加密，并且每次 - 1</p>\n<p>线程 2：若 counter&gt;-1 每次 -1</p>\n<p>所以加密基数或者偶数部分</p>\n</blockquote>\n<p>CreateMutexW: 作用是找出当前系统是否已经存在指定进程的实例.</p>\n<p>CreateThread:CreateThread 是一种微软在 Windows API 中提供了建立新的线程的函数，该<a href=\"https://baike.baidu.com/item/%E5%87%BD%E6%95%B0/301912?fromModule=lemma_inlink\">函数</a>在<a href=\"https://baike.baidu.com/item/%E4%B8%BB%E7%BA%BF%E7%A8%8B/9600138?fromModule=lemma_inlink\">主线程</a>的基础上创建一个新线程。<a href=\"https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101?fromModule=lemma_inlink\">线程</a>终止运行后，线程对象仍然在系统中，必须通过 CloseHandle 函数来关闭该线程对象。</p>\n<p>CloseHandle: 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。在 CreateThread 成功之后会返回一个 hThread 的 handle，且内核对象的计数加 1，CloseHandle 之后，引用计数减 1，当变为 0 时，系统删除内核对象。</p>\n<p>WaitForSingleObject:WaitForSingleObject 函数用来检测 hHandle 事件的信号状态，在某一线程中调用该函数时，线程暂时挂起，如果在挂起的 dwMilliseconds 毫秒内，线程所等待的对象变为有信号状态，则该函数立即返回；如果时间已经到达 dwMilliseconds 毫秒，但 hHandle 所指向的对象还没有变成有信号状态，函数照样返回。</p>\n<p>在这里就相当于，第一个线程调用该函数，然后这里的 WaitForSingleObject 函数用来检测之前线程的信号状态，暂时挂起</p>\n<p>多线程例子：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>HANDLE hMutex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DWORD WINAPI <span class=\"token function\">thread01</span><span class=\"token punctuation\">(</span>LPVOID lvParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hMutex<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tlast<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread 1 work on \"</span> <span class=\"token operator\">&lt;&lt;</span> last <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">ReleaseMutex</span><span class=\"token punctuation\">(</span>hMutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>DWORD WINAPI <span class=\"token function\">thread02</span><span class=\"token punctuation\">(</span>LPVOID lvParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hMutex<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tlast<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread 2 work on \"</span> <span class=\"token operator\">&lt;&lt;</span> last <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">ReleaseMutex</span><span class=\"token punctuation\">(</span>hMutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\thMutex <span class=\"token operator\">=</span> <span class=\"token function\">CreateMutexA</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCSTR<span class=\"token punctuation\">)</span><span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hMutex <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tHANDLE hTread1 <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> thread01<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hTread1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tHANDLE hTread2 <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> thread02<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hTread2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hTread1<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hTread2<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hTread1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hTread2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hMutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这题里面</p>\n<h1 id=\"游戏逆向\"><a class=\"anchor\" href=\"#游戏逆向\">#</a> 游戏逆向</h1>\n<h3 id=\"任务管理器找进程\"><a class=\"anchor\" href=\"#任务管理器找进程\">#</a> 任务管理器找进程</h3>\n<p>打开任务管理器</p>\n<p>&lt;img src=&quot;逆向工程 /image-20240811072446821.png&quot; alt=&quot;image-20240811072446821&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p>然后右键，转到详细信息就有了</p>\n<h2 id=\"ce\"><a class=\"anchor\" href=\"#ce\">#</a> CE</h2>\n<p>资源网址:<a href=\"https://wpfx.org/\">https://wpfx.org/</a></p>\n<p>[CE](D:\\Software\\Cheat_Engine_7.5\\Cheat Engine 7.5)</p>\n<p><a href=\"%E2%80%AAE:%5CTools%5COD%5COllyICE%5COD.exe\">ollydbg</a></p>\n<p>搜字符串的时候把代码页勾上，可以搜出更多</p>\n<h4 id=\"找血量\"><a class=\"anchor\" href=\"#找血量\">#</a> 找血量</h4>\n<p>可以换装备，被怪打</p>\n<h4 id=\"搜byte\"><a class=\"anchor\" href=\"#搜byte\">#</a> 搜 byte</h4>\n<p>可以勾选快速扫描，4 字节对齐，这样可以加快速度</p>\n<h4 id=\"天龙八部\"><a class=\"anchor\" href=\"#天龙八部\">#</a> 天龙八部</h4>\n<p>TODO: p37</p>\n<p>记得启动器里面选 32 位</p>\n<p><code>axery123@changyou.com</code></p>\n<p><code>123axery</code></p>\n<p><code>岳朋 男 211481198401154411</code></p>\n<h5 id=\"人物状态\"><a class=\"anchor\" href=\"#人物状态\">#</a> 人物状态</h5>\n<p>rcx + 234</p>\n<p>1A34D9946D0 + 234</p>\n<p>rcx = rax+80</p>\n<p>rax=1A30B1C01D0</p>\n<p>Game.exe+593935</p>\n<h2 id=\"汇编指令\"><a class=\"anchor\" href=\"#汇编指令\">#</a> 汇编指令</h2>\n<h4 id=\"lea\"><a class=\"anchor\" href=\"#lea\">#</a> lea</h4>\n<pre><code>lea eax, dword ptr [ebp-8]\n</code></pre>\n<p>把右边的地址复制给左边</p>\n<h4 id=\"pushad-popad\"><a class=\"anchor\" href=\"#pushad-popad\">#</a> pushad, popad</h4>\n<p>把 8 个寄存器全部 push 到栈上面</p>\n<h4 id=\"rep-movs\"><a class=\"anchor\" href=\"#rep-movs\">#</a> rep movs</h4>\n<p>循环 ecx 次，每次把 esi 地址的内容复制给 edi 地址的内容，然后 esi,edi 增加 4</p>\n<h3 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h3>\n<h4 id=\"ebp\"><a class=\"anchor\" href=\"#ebp\">#</a> ebp</h4>\n<p>栈顶</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>b</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">ebp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">p</span></span></span></span> 是保持上次的 ebp 值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>u</mi><mi>s</mi><mi>h</mi><mtext> </mtext><mi>e</mi><mi>b</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>m</mi><mi>o</mi><mi>v</mi><mtext> </mtext><mi>e</mi><mi>b</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>e</mi><mi>s</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">push \\ ebp, mov \\ ebp, esp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">es</span><span class=\"mord mathnormal\">p</span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>e</mi><mi>b</mi><mi>p</mi><mo>+</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[ebp+4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span></span></span></span> 是回去的地址</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>e</mi><mi>b</mi><mi>p</mi><mo>+</mo><mn>8</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[ebp+8]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">8</span><span class=\"mclose\">]</span></span></span></span> 是传入的第一个参数</p>\n</li>\n</ul>\n<h2 id=\"ollydbg\"><a class=\"anchor\" href=\"#ollydbg\">#</a> OllyDBG</h2>\n<p><a href=\"E:%5CTools%5COD%5COllyICE%5COD.exe\">ollydbg</a></p>\n<p>汉化包</p>\n<p><a href=\"https://github.com/lennylxx/ollydbg-zh/releases\">https://github.com/lennylxx/ollydbg-zh/releases</a></p>\n<p>复制到根目录之后，可以在 file 里面选择 gui language 为中文</p>\n<h3 id=\"快捷键\"><a class=\"anchor\" href=\"#快捷键\">#</a> 快捷键</h3>\n<ul>\n<li>回车：进入 call</li>\n<li>F9: 运行</li>\n<li>F8: 步过 把 call 运行完</li>\n<li>F7: 步入： 运行到 call 的开头</li>\n<li><code>-</code>  后退</li>\n<li><code>+</code>  前进</li>\n<li>F2：断点</li>\n<li>F4：运行到当前指向的命令</li>\n<li>Ctrl+F9: 执行到返回</li>\n<li>Ctrl+G: 查看地址，APT 代码</li>\n</ul>\n<h3 id=\"x64dbg-2\"><a class=\"anchor\" href=\"#x64dbg-2\">#</a> x64dbg</h3>\n<ul>\n<li>\n<p>再选项里吗可以设置关闭断点</p>\n</li>\n<li>\n<p>带参数调试 ： 文件，改变命令行</p>\n</li>\n<li>\n<p>高亮寄存器：快捷键 H，再选项中打开</p>\n</li>\n</ul>\n<h3 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h3>\n<ul>\n<li>API 断点:  <code>bp MessageBoxA</code></li>\n<li>dd 输出地址的值   <code>dd eax</code></li>\n</ul>\n<h3 id=\"查找字符串\"><a class=\"anchor\" href=\"#查找字符串\">#</a> 查找字符串</h3>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240929115846957.png\" alt=\"image-20240929115846957\"></p>\n<h3 id=\"附加进程\"><a class=\"anchor\" href=\"#附加进程\">#</a> 附加进程</h3>\n<p>文件，附加 j 进程，选择想要的进程</p>\n<p>点击三角形让程序运行，</p>\n<p>如果卡住了可以按 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> , 然后右键 Resume all threads</p>\n<h4 id=\"od界面\"><a class=\"anchor\" href=\"#od界面\">#</a> OD 界面</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> 是模块，选择游戏模块</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> 是初始界面</p>\n<p>查找注释：</p>\n<p>先在 E 窗口找到主程序，然后右键查找用户定义的注释</p>\n<h4 id=\"跳转\"><a class=\"anchor\" href=\"#跳转\">#</a> 跳转</h4>\n<p>Ctrl+G 打开调整，输入内存地址或者  <code>ws2_32.send</code></p>\n<p>x64dbg 是  <code>game + 2ECE21</code>  可以加入基地址</p>\n<p>可以跳到这个模块的 send 函数</p>\n<h3 id=\"od断点\"><a class=\"anchor\" href=\"#od断点\">#</a> OD 断点</h3>\n<p>右键可以下断点</p>\n<h4 id=\"内存断点\"><a class=\"anchor\" href=\"#内存断点\">#</a> 内存断点</h4>\n<p>内存访问的时候断</p>\n<h4 id=\"硬件断点\"><a class=\"anchor\" href=\"#硬件断点\">#</a> 硬件断点</h4>\n<p>只能 4 个</p>\n<p>可以在内存地址右键，硬件断点，硬件写入，Byte</p>\n<p>来查找谁写入了这个位置</p>\n<h4 id=\"f2断点\"><a class=\"anchor\" href=\"#f2断点\">#</a> F2 断点</h4>\n<p>可以下任意多个</p>\n<h4 id=\"api断点\"><a class=\"anchor\" href=\"#api断点\">#</a> api 断点</h4>\n<p><code>bp ws2_32.send</code></p>\n<h4 id=\"条件断点\"><a class=\"anchor\" href=\"#条件断点\">#</a> 条件断点</h4>\n<p>shift + F2</p>\n<p><code>[76ad5000]==06aa72a0</code></p>\n<h3 id=\"发包\"><a class=\"anchor\" href=\"#发包\">#</a> 发包</h3>\n<h4 id=\"发包函数\"><a class=\"anchor\" href=\"#发包函数\">#</a> 发包函数</h4>\n<ul>\n<li>send</li>\n<li>sendto</li>\n<li>WSASend</li>\n<li>WSPSend: 在  <code>ws2_32.WEP</code>  下面有个  <code>call esi</code>  这个是</li>\n</ul>\n<p>一般是  <code>ws2_32.send</code>  在这个模块里，如果不是的话，需要指定模块名字</p>\n<h2 id=\"易语言\"><a class=\"anchor\" href=\"#易语言\">#</a> 易语言</h2>\n<p><a href=\"https://www.dywt.com.cn/\">https://www.dywt.com.cn/</a> 产品下载 5.93</p>\n<p>下载易语言安装补丁 ( <code>CTF/逆向</code> )</p>\n<p>把  <code>e.exe</code>  替换过去，linker 里面的内容也拖过来替换</p>\n<p>然后打开替换来的  <code>link.e</code>  用易语言打开，然后运行一下就好了</p>\n<h4 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h4>\n<ul>\n<li>ctrl + L: 添加变量</li>\n</ul>\n<h4 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h4>\n<p>编译，静态编译，</p>\n<p>静态的会打包所有需要的 dll</p>\n<h4 id=\"常用设置\"><a class=\"anchor\" href=\"#常用设置\">#</a> 常用设置</h4>\n<p>程序，程序配置对话框：可以配置图标，描述</p>\n<p>工具</p>\n<ul>\n<li>\n<p>支持库配置里全勾上</p>\n</li>\n<li>\n<p>系统设置，</p>\n<ul>\n<li>通常：可以取消编译时检查死循环</li>\n<li>存根，可以设置请求管理员权限</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"自定义数据类型\"><a class=\"anchor\" href=\"#自定义数据类型\">#</a> 自定义数据类型</h4>\n<p>就是 c 的 struct</p>\n<h4 id=\"基本函数\"><a class=\"anchor\" href=\"#基本函数\">#</a> 基本函数</h4>\n<p>到文本：转换成字符串</p>\n<h4 id=\"if\"><a class=\"anchor\" href=\"#if\">#</a> if</h4>\n<pre><code class=\"language-e\">如果 (时间 % 2)\n</code></pre>\n<p>没有 else 的</p>\n<pre><code class=\"language-e\">如果真 ()\n</code></pre>\n<p>判断 是 switch</p>\n<h4 id=\"for\"><a class=\"anchor\" href=\"#for\">#</a> for</h4>\n<p>j 从 1 到 100</p>\n<pre><code class=\"language-e\">计次循环首(100, j)\ns = s+j\n计次循环尾()\n</code></pre>\n<h4 id=\"while\"><a class=\"anchor\" href=\"#while\">#</a> while</h4>\n<pre><code class=\"language-e\">\na ＝ 1\n判断循环首 (a ＜ 10)\n    a ＝ a ＋ 1\n判断循环尾 ()\n标签1.标题 ＝ 到文本 (a)\n\n</code></pre>\n<h4 id=\"dll命令\"><a class=\"anchor\" href=\"#dll命令\">#</a> Dll 命令</h4>\n<p>比如 Messagebox</p>\n<h3 id=\"组件\"><a class=\"anchor\" href=\"#组件\">#</a> 组件</h3>\n<h4 id=\"时钟\"><a class=\"anchor\" href=\"#时钟\">#</a> 时钟</h4>\n<p>时钟周期</p>\n<h3 id=\"visual-studio\"><a class=\"anchor\" href=\"#visual-studio\">#</a> Visual Studio</h3>\n<p><a href=\"https://visualstudio.microsoft.com/de/\">https://visualstudio.microsoft.com/de/</a> 下载就行了</p>\n<p>然后只勾选 c<ins> 和 windows, 扩展开发，在 C</ins> 桌面开发里面额外勾选 MFC</p>\n<p>文件，账户选项，搜索字体，可以调整字体大小</p>\n<h4 id=\"反汇编\"><a class=\"anchor\" href=\"#反汇编\">#</a> 反汇编</h4>\n<p>打个断点运行后，右键选择  <code>转到反汇编</code></p>\n<p>右键可以选择是否显示变量名</p>\n<h5 id=\"内存\"><a class=\"anchor\" href=\"#内存\">#</a> 内存</h5>\n<p>在调试，窗口，内存里面找</p>\n<p>内存里面可以  <code>&amp;a</code>  来找到变量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 的地址内容</p>\n<h4 id=\"mfc-dll\"><a class=\"anchor\" href=\"#mfc-dll\">#</a> MFC DLL</h4>\n<p>选择静态链接</p>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240811135822371.png\" alt=\"image-20240811135822371\"></p>\n<p>视图，其他窗口，资源视图，把他选出来</p>\n<p>然后右键添加资源，选择 Dialog</p>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240811140259142.png\" alt=\"image-20240811140259142\"></p>\n<p>确定和取消按钮可以自己删掉</p>\n<h4 id=\"32位程序\"><a class=\"anchor\" href=\"#32位程序\">#</a> 32 位程序</h4>\n<p>可以选择在 debug 旁边 选择 x86 来写 win32 程序</p>\n<h4 id=\"项目tl1属性\"><a class=\"anchor\" href=\"#项目tl1属性\">#</a> 项目，TL1 属性</h4>\n<p>可以选择 windows sdk 版本</p>\n<p>使用的字符集</p>\n<h4 id=\"工具箱\"><a class=\"anchor\" href=\"#工具箱\">#</a> 工具箱</h4>\n<p>视图，工具箱，里面有组件</p>\n<p>视图，属性窗口也要选</p>\n<h4 id=\"创建类\"><a class=\"anchor\" href=\"#创建类\">#</a> 创建类</h4>\n<p>右键 dialog 的空白处，添加类作为创建的这个 dialog 的类名，可以取名 <code>XXDialog</code></p>\n<p>在 DLL 的主 cpp 文件中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TLDialog<span class=\"token operator\">*</span> dialog<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span>LPARAM lpData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tdialog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> TLDialog<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分配空间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tdialog<span class=\"token operator\">-></span><span class=\"token function\">DoModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞的方式 模态窗口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">delete</span> dialog<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">FreeLibraryAndExitThread</span><span class=\"token punctuation\">(</span>theApp<span class=\"token punctuation\">.</span>m_hInstance<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放 DLL 退出线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// CMFCLibrary1App 初始化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>BOOL <span class=\"token class-name\">CMFCLibrary1App</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">CWinApp</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>ShowDialog<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建线程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/image-20240811144327614.png\" alt=\"image-20240811144327614\"></p>\n<p>右键重新生成来编译</p>\n<p>在 CE 中查找好基地址和便宜</p>\n<blockquote>\n<p>练习：查找新天龙八部怀旧的人物状态</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD base_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">GetModuleHandleA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Game.exe\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x5946DC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD offset1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>base_addr <span class=\"token operator\">+</span> <span class=\"token number\">0x0c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD offset2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>offset1 <span class=\"token operator\">+</span> <span class=\"token number\">0x14c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD addr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>offset2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">outputdebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人物信息：人物状态: %d\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>exception<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">outputdebug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后是输出在 debug 信息的代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">outputdebug</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pszFormat<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> szbufFormat<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">char</span> szbufFormatGame<span class=\"token punctuation\">[</span><span class=\"token number\">0x1100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tva_list argList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>argList<span class=\"token punctuation\">,</span> pszFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">vsprintf_s</span><span class=\"token punctuation\">(</span>szbufFormat<span class=\"token punctuation\">,</span> pszFormat<span class=\"token punctuation\">,</span> argList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">strcat_s</span><span class=\"token punctuation\">(</span>szbufFormatGame<span class=\"token punctuation\">,</span> szbufFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>szbufFormatGame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>argList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个 dubug 信息可以在 DebugView 来看</p>\n<p>用管理员权限打开 DebugView, 然后打开监视核心，可以选择过滤字符串。</p>\n<h4 id=\"汇编代码注入\"><a class=\"anchor\" href=\"#汇编代码注入\">#</a> 汇编代码注入</h4>\n<p>call 函数的时候要记得先放在寄存器里</p>\n<p>Detach 之后再注入</p>\n<pre><code class=\"language-asm\">pushad\nmov ecx, 0x3F080A28\nmov eax, 0x6a5e60\ncall eax\npopad\n</code></pre>\n<p>ecx:</p>\n<pre><code class=\"language-asm\">[[[Game.exe+5946FC]+ 60]+ 154]\n</code></pre>\n<h2 id=\"天龙八部怀旧\"><a class=\"anchor\" href=\"#天龙八部怀旧\">#</a> 天龙八部怀旧</h2>\n<h4 id=\"背包数组\"><a class=\"anchor\" href=\"#背包数组\">#</a> 背包数组</h4>\n<p>cnt:</p>\n<pre><code class=\"language-asm\">[[i*4+[[Game.exe+594724]+181c4]]+0x14]+0x58\n</code></pre>\n<p>base</p>\n<pre><code class=\"language-asm\">[[Game.exe+594724]+181c4]\n</code></pre>\n<p>名字</p>\n<p>[[base+i*4]+2c]+18]</p>\n<ul>\n<li><code>+2c,+1c</code>  说明</li>\n<li><code>+2c,+20</code>  使用等级</li>\n<li><code>+2c,+40</code>  耐久</li>\n</ul>\n<h4 id=\"npc-遍历\"><a class=\"anchor\" href=\"#npc-遍历\">#</a> NPC 遍历</h4>\n<p><img src=\"/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/c45b801d423975f7a189ebf3b9e8db1.png\" alt=\"c45b801d423975f7a189ebf3b9e8db1\"></p>\n<p>这是一个链表</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>esi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>edi<span class=\"token operator\">+</span><span class=\"token number\">1</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>esi <span class=\"token operator\">!=</span> <span class=\"token punctuation\">[</span>edi<span class=\"token operator\">+</span><span class=\"token number\">1</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    esi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"血量遍历\"><a class=\"anchor\" href=\"#血量遍历\">#</a> 血量遍历</h4>\n<p>先用 CE 搜索浮点数找到血量百分比</p>\n<pre><code class=\"language-asm\">[[[[[[[[[0x117CCB8]+0x54]+0x4]]]+0x14]+0x148]+0x10]+0x8]=target\n</code></pre>\n",
            "tags": [
                "CTF文章"
            ]
        },
        {
            "id": "https://cr4zyp1x3l.netlify.app/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E4%B8%8E%E7%A2%B0%E6%92%9E%E6%83%85%E5%86%B5/",
            "url": "https://cr4zyp1x3l.netlify.app/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E4%B8%8E%E7%A2%B0%E6%92%9E%E6%83%85%E5%86%B5/",
            "title": "哈希长度与碰撞情况",
            "date_published": "2025-02-03T22:12:51.000Z",
            "content_html": "<h1 id=\"哈希长度与碰撞情况\"><a class=\"anchor\" href=\"#哈希长度与碰撞情况\">#</a> 哈希长度与碰撞情况</h1>\n<p>以下是各种常见长度的哈希函数及其碰撞情况分析：</p>\n<table>\n<thead>\n<tr>\n<th>哈希长度 (bit)</th>\n<th>常见算法</th>\n<th>碰撞情况</th>\n<th>碰撞年份</th>\n<th>发明年份</th>\n<th>状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>128-bit</strong></td>\n<td>MD5</td>\n<td>存在已知有效碰撞攻击</td>\n<td>2004 年</td>\n<td>1992 年</td>\n<td>已过时，不推荐使用</td>\n</tr>\n<tr>\n<td><strong>160-bit</strong></td>\n<td>SHA-0, SHA-1, RIPEMD-160</td>\n<td>SHA-0: 存在已知有效碰撞攻击</td>\n<td>SHA-0: 2004 年</td>\n<td>SHA-0: 1993 年</td>\n<td>SHA-0: 已弃用，不推荐使用</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>SHA-1: 存在已知有效碰撞攻击</td>\n<td>SHA-1: 2017 年</td>\n<td>SHA-1: 1995 年</td>\n<td>已过时，不推荐使用</td>\n</tr>\n<tr>\n<td><strong>256-bit</strong></td>\n<td>SHA-256, SHA-3-256</td>\n<td>暂无已知有效碰撞攻击</td>\n<td>-</td>\n<td>SHA-256: 2001 年</td>\n<td>安全，广泛使用</td>\n</tr>\n<tr>\n<td><strong>384-bit</strong></td>\n<td>SHA-384</td>\n<td>暂无已知有效碰撞攻击</td>\n<td>-</td>\n<td>2001 年</td>\n<td>安全，高安全性需求</td>\n</tr>\n<tr>\n<td><strong>512-bit</strong></td>\n<td>SHA-512, SHA-3-512</td>\n<td>暂无已知有效碰撞攻击</td>\n<td>-</td>\n<td>SHA-512: 2001 年</td>\n<td>非常安全，高性能需求</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"碰撞情况说明\"><a class=\"anchor\" href=\"#碰撞情况说明\">#</a> 碰撞情况说明</h2>\n<ul>\n<li>\n<p><strong>128-bit (MD5)</strong>:</p>\n<ul>\n<li>MD5 是一种输出为 128 位的哈希算法，但由于其设计的安全性不足，早在 2004 年就被发现可以有效制造碰撞。</li>\n<li>MD5 于 1992 年被发明，不适合任何需要密码学安全性的场景，仅可用于低安全性完整性校验。</li>\n</ul>\n</li>\n<li>\n<p><strong>160-bit (SHA-0, SHA-1, RIPEMD-160)</strong>:</p>\n<ul>\n<li>SHA-0 是 SHA 系列的初代版本，存在严重的设计缺陷，在 2004 年被证明可以制造碰撞。SHA-0 于 1993 年发明。</li>\n<li>SHA-1 作为输出 160 位的主流算法，在 2017 年被证实可以通过理论和实践攻击制造碰撞。SHA-1 于 1995 年发明。</li>\n<li>RIPEMD-160 虽尚未有公开的碰撞记录，但不如更高位算法安全。</li>\n</ul>\n</li>\n<li>\n<p><strong>256-bit (SHA-256, SHA-3-256)</strong>:</p>\n<ul>\n<li>目前没有已知的碰撞攻击。</li>\n<li>SHA-256 于 2001 年被发明，适合绝大多数场景，如数字签名、区块链和数据完整性验证。</li>\n</ul>\n</li>\n<li>\n<p><strong>384-bit (SHA-384)</strong>:</p>\n<ul>\n<li>为高安全需求设计，未有任何已知的碰撞攻击。</li>\n<li>SHA-384 于 2001 年发明，适用于密钥交换、长时间数据存储等高安全性应用。</li>\n</ul>\n</li>\n<li>\n<p><strong>512-bit (SHA-512, SHA-3-512)</strong>:</p>\n<ul>\n<li>提供极高的安全性，特别适用于对抗潜在的量子计算威胁。</li>\n<li>SHA-512 于 2001 年发明，性能消耗较高，适合长期存储的场景。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"md5-哈希碰撞\"><a class=\"anchor\" href=\"#md5-哈希碰撞\">#</a> MD5 哈希碰撞</h2>\n<p>b&quot;TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak&quot; b&quot;TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak&quot;</p>\n<p>md5 计算结果均为：faad49866e9498fc1719f5289e7a0269</p>\n",
            "tags": [
                "CTF文章"
            ]
        }
    ]
}